from django.db.models.signals import post_save, post_migrate
from django.dispatch import receiver
from .models import Customer, Wallet, Subscription, Package
from django.utils import timezone
from datetime import timedelta
from django.utils.timezone import now
from django.contrib.auth.signals import user_logged_in, user_logged_out
import logging

logger = logging.getLogger('django')
@receiver(post_save, sender=Customer)
def create_wallet_and_subscription(sender, instance, created, **kwargs):
    if created:
        # T·∫°o Subscription v·ªõi ID_Pack=1 v√† Active=1 (Subscription s·∫Ω ph·∫£i ƒë∆∞·ª£c li√™n k·∫øt v·ªõi Package)
        try:
            package = Package.objects.get(id=1)  # L·∫•y Package v·ªõi ID=1, b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh theo y√™u c·∫ßu
            # T·∫°o Subscription v·ªõi start_date v√† end_date theo y√™u c·∫ßu (v√≠ d·ª•: trong 30 ng√†y)
            start_date = timezone.now().date()
            end_date = start_date + timedelta(days=30)
            subscription = Subscription.objects.create(
                customer=instance,
                package=package,
                start_date=start_date,
                end_date=end_date,
                status=True  # Active = 1
            )
        except Package.DoesNotExist:
            print("Package with ID=1 does not exist.")

@receiver(post_migrate)
def check_and_update_subscriptions(sender, **kwargs):
    print('üîÑ Signal check_and_update_subscriptions is running...')  # Ki·ªÉm tra signal c√≥ ch·∫°y kh√¥ng
    today = now().date()
    expired_subs = Subscription.objects.filter(end_date__lt=today, status=True)
    count = expired_subs.update(status=False)
    print(f"‚úÖ Updated {count} expired subscriptions to inactive.")

@receiver(user_logged_in)
def log_login(sender, request, user, **kwargs):
    logger.info(f"User {user.username} logged in.")

@receiver(user_logged_out)
def log_logout(sender, request, user, **kwargs):
    logger.info(f"User {user.username} logged out.")